import { Markup } from "telegraf";
import { User } from "../models/User.js";
import { Appointment } from "../models/Appointment.js";

const coffeeTempState = new Map();
const procedureTempState = new Map();

function getNextThreeDates() {
  const dates = [];
  const options = { day: "numeric", month: "long" };
  const today = new Date();

  for (let i = 0; i < 3; i++) {
    const future = new Date();
    future.setDate(today.getDate() + i);
    const formatted = future.toLocaleDateString("uk-UA", options);
    const iso = future.toISOString().split("T")[0];
    dates.push({ label: formatted, value: iso });
  }
  return dates;
}

export function coffeeHandler(bot, userStates, notifyAdmin) {
  bot.hears(/–∑–∞–º–æ–≤–∏—Ç–∏\s*–∫–∞–≤—É/i, async (ctx) => {
    console.log("üî• –ö–Ω–æ–ø–∫–∞ –∫–∞–≤–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞:", ctx.message.text);
    userStates.delete(ctx.from.id);
    coffeeTempState.delete(ctx.from.id);

    const telegramId = ctx.from.id;
    const user = await User.findOne({ telegramId });

    if (!user) {
      return ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.");
    }

    return showCoffeeOptions(ctx);
  });

  // –ö—Ä–æ–∫ 1: –í–∏–±—ñ—Ä —Ç–∏–ø—É
  bot.action(/coffee_(.+)/, async (ctx) => {
    const choice = ctx.match[1];
    const coffeeName =
      {
        espresso: "–ï—Å–ø—Ä–µ—Å–æ",
        americano: "–ê–º–µ—Ä–∏–∫–∞–Ω–æ",
        latte: "–õ–∞—Ç–µ",
        lungo: "–õ—É–Ω–≥–æ",
      }[choice] || "–ö–∞–≤–∞";

    const telegramId = ctx.from.id;
    coffeeTempState.set(telegramId, { type: coffeeName });

    await ctx.answerCbQuery();
    await ctx.editMessageText(
      `‚òï –í–∏ –æ–±—Ä–∞–ª–∏ ${coffeeName}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:`
    );

    return ctx.telegram.sendMessage(
      ctx.chat.id,
      "üìè –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:",
      Markup.inlineKeyboard([
        [Markup.button.callback("–ú–∞–ª–µ–Ω—å–∫–∞", "size_small")],
        [Markup.button.callback("–°–µ—Ä–µ–¥–Ω—è", "size_medium")],
        [Markup.button.callback("–í–µ–ª–∏–∫–∞", "size_large")],
      ])
    );
  });

  // –ö—Ä–æ–∫ 2: –í–∏–±—ñ—Ä —Ä–æ–∑–º—ñ—Ä—É
  bot.action(/size_(.+)/, async (ctx) => {
    const sizeKey = ctx.match[1];
    const sizeName =
      {
        small: "–ú–∞–ª–µ–Ω—å–∫–∞",
        medium: "–°–µ—Ä–µ–¥–Ω—è",
        large: "–í–µ–ª–∏–∫–∞",
      }[sizeKey] || "–ó–≤–∏—á–∞–π–Ω–∞";

    const telegramId = ctx.from.id;
    const coffeeData = coffeeTempState.get(telegramId);

    if (!coffeeData) {
      return ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ —â–µ —Ä–∞–∑.");
    }

    coffeeData.size = sizeName;

    await ctx.answerCbQuery();
    await ctx.editMessageText(
      `üìè –í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–∑–º—ñ—Ä: ${sizeName}. –î–æ–¥–∞—Ç–∏ —Ü—É–∫–æ—Ä?`
    );

    return ctx.telegram.sendMessage(
      ctx.chat.id,
      "üßÇ –î–æ–¥–∞—Ç–∏ —Ü—É–∫–æ—Ä?",
      Markup.inlineKeyboard([
        [Markup.button.callback("–¢–∞–∫", "sugar_yes")],
        [Markup.button.callback("–ù—ñ", "sugar_no")],
      ])
    );
  });

  // –ö—Ä–æ–∫ 3: –í–∏–±—ñ—Ä —Ü—É–∫—Ä—É
  bot.action(/sugar_(.+)/, async (ctx) => {
    const sugarChoice = ctx.match[1] === "yes" ? "–∑ —Ü—É–∫—Ä–æ–º" : "–±–µ–∑ —Ü—É–∫—Ä—É";
    const telegramId = ctx.from.id;
    const user = await User.findOne({ telegramId });
    const coffeeData = coffeeTempState.get(telegramId);

    if (!coffeeData || !coffeeData.type || !coffeeData.size) {
      return ctx.reply("–î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }

    coffeeData.sugar = sugarChoice;

    await ctx.answerCbQuery();

    const finalText = `‚úÖ –í–∏ –∑–∞–º–æ–≤–∏–ª–∏ ${coffeeData.type} (${coffeeData.size}, ${coffeeData.sugar}). –í–∞—à–∞ –∫–∞–≤–∞ –≥–æ—Ç—É—î—Ç—å—Å—è!`;
    await ctx.editMessageText(finalText);

    if (user) {
      await notifyAdmin(
        bot,
        `‚òï ${user.firstName} (${user.phoneNumber}) –∑–∞–º–æ–≤–∏–≤(–ª–∞) ${coffeeData.type} (${coffeeData.size}, ${coffeeData.sugar})`
      );
    } else {
      await notifyAdmin(
        bot,
        `‚òï ${ctx.from.first_name} –∑–∞–º–æ–≤–∏–≤(–ª–∞) ${coffeeData.type} (${coffeeData.size}, ${coffeeData.sugar}) (–Ω–æ–º–µ—Ä –Ω–µ–≤—ñ–¥–æ–º–∏–π)`
      );
    }

    coffeeTempState.delete(telegramId);

    setTimeout(() => {
      ctx.telegram.sendMessage(ctx.chat.id, `‚òï –í–∞—à–∞ –∫–∞–≤–∞ –≤–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ!`);
    }, 60 * 1000);
  });

  // –ü–µ—Ä–µ–≥–ª—è–¥ —ñ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
  bot.hears("üìÖ –ú–æ—ó –∑–∞–ø–∏—Å–∏", async (ctx) => {
    const telegramId = ctx.from.id;
    const appointments = await Appointment.find({ telegramId });

    if (appointments.length === 0) {
      return await ctx.reply("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.");
    }

    let response = "üìã –í–∞—à—ñ –∑–∞–ø–∏—Å–∏:\n\n";
    appointments.forEach((a, i) => {
      response += `${i + 1}. ${a.procedure} ‚Äî ${a.date} –æ ${a.time}\n`;
    });

    const buttons = [
      [Markup.button.callback("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å", "cancel_single")],
      [Markup.button.callback("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏", "cancel_all")],
    ];

    await ctx.reply(response, Markup.inlineKeyboard(buttons));
  });

  bot.action("cancel_all", async (ctx) => {
    const telegramId = ctx.from.id;
    await Appointment.deleteMany({ telegramId });
    await ctx.answerCbQuery();
    await ctx.editMessageText("üóëÔ∏è –í—Å—ñ –∑–∞–ø–∏—Å–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
  });

  bot.action("cancel_single", async (ctx) => {
    const telegramId = ctx.from.id;
    const appointments = await Appointment.find({ telegramId });

    if (appointments.length === 0) {
      return ctx.reply("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.");
    }

    const buttons = appointments.map((a) => [
      Markup.button.callback(
        `${a.procedure} ‚Äî ${a.time}`,
        `cancel_${a._id.toString()}`
      ),
    ]);

    await ctx.answerCbQuery();
    return ctx.reply(
      "‚ùå –û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:",
      Markup.inlineKeyboard(buttons)
    );
  });

  bot.action(/cancel_(.+)/, async (ctx) => {
    const id = ctx.match[1];
    await Appointment.findByIdAndDelete(id);
    await ctx.answerCbQuery();
    await ctx.editMessageText("‚ùå –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
  });

  // ‚úÖ –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
  bot.action(/procedure_(.+)/, async (ctx) => {
    const chosenKey = ctx.match[1];
    const procedureMap = {
      massage: "–ú–∞—Å–∞–∂",
      cleaning: "–ß–∏—Å—Ç–∫–∞",
      btl: "–ë–¢–õ",
      endosphere: "–ï–Ω–¥–æ—Å—Ñ–µ—Ä–∞",
    };
    const procedure = procedureMap[chosenKey] || "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞";
    const telegramId = ctx.from.id;

    procedureTempState.set(telegramId, { procedure });

    await ctx.answerCbQuery();
    await ctx.editMessageText(`‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: ${procedure}`);

    const dates = getNextThreeDates();
    const buttons = dates.map((d) => [
      Markup.button.callback(d.label, `procdate_${d.value}`),
    ]);

    await ctx.telegram.sendMessage(
      ctx.chat.id,
      "üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:",
      Markup.inlineKeyboard(buttons)
    );
  });

  bot.action(/procdate_(\d{4}-\d{2}-\d{2})/, async (ctx) => {
    const date = ctx.match[1];
    const telegramId = ctx.from.id;
    const data = procedureTempState.get(telegramId);

    if (!data) return ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");

    data.date = date;
    procedureTempState.set(telegramId, data);

    const times = ["10:00", "11:00", "12:00", "14:00", "15:00", "16:00"];
    const buttons = times.map((t) => [
      Markup.button.callback(t, `proctime_${t.replace(":", "")}`),
    ]);

    await ctx.answerCbQuery();
    await ctx.editMessageText(`üìÖ –í–∏ –æ–±—Ä–∞–ª–∏ –¥–∞—Ç—É: ${date}`);
    await ctx.telegram.sendMessage(
      ctx.chat.id,
      "üïí –û–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
      Markup.inlineKeyboard(buttons)
    );
  });

  bot.action(/proctime_(\d{2})(\d{2})/, async (ctx) => {
    const hour = ctx.match[1];
    const minute = ctx.match[2];
    const time = `${hour}:${minute}`;
    const telegramId = ctx.from.id;
    const user = await User.findOne({ telegramId });
    const data = procedureTempState.get(telegramId);

    if (!data || !data.procedure || !data.date) {
      return ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }

    const existing = await Appointment.findOne({
      date: data.date,
      time,
      procedure: data.procedure,
    });

    await ctx.answerCbQuery();

    if (existing) {
      return ctx.reply("‚ùå –¶–µ–π —á–∞—Å —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.");
    }

    const newAppointment = new Appointment({
      telegramId,
      procedure: data.procedure,
      date: data.date,
      time,
    });

    await newAppointment.save();
    procedureTempState.delete(telegramId);

    await ctx.editMessageText(
      `‚úÖ –í–∏ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ ${data.procedure} ‚Äî ${data.date} –æ ${time}`
    );

    if (user) {
      await notifyAdmin(
        bot,
        `üßæ ${user.firstName} (${user.phoneNumber}) –∑–∞–ø–∏—Å–∞–≤—Å—è –Ω–∞ ${data.procedure} ‚Äî ${data.date} –æ ${time}`
      );
    }
  });
}

function showCoffeeOptions(ctx) {
  return ctx.reply(
    "‚òï –û–±–µ—Ä—ñ—Ç—å –∫–∞–≤—É:",
    Markup.inlineKeyboard([
      [Markup.button.callback("–ï—Å–ø—Ä–µ—Å–æ", "coffee_espresso")],
      [Markup.button.callback("–ê–º–µ—Ä–∏–∫–∞–Ω–æ", "coffee_americano")],
      [Markup.button.callback("–õ–∞—Ç–µ", "coffee_latte")],
      [Markup.button.callback("–õ—É–Ω–≥–æ", "coffee_lungo")],
    ])
  );
}
