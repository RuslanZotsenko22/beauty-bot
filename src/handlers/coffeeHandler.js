import { Markup } from "telegraf";
import { User } from "../models/User.js";

const coffeeTempState = new Map();

export function coffeeHandler(bot, userStates, notifyAdmin) {
  bot.hears(/–∑–∞–º–æ–≤–∏—Ç–∏\s*–∫–∞–≤—É/i, async (ctx) => {
    console.log("üî• –ö–Ω–æ–ø–∫–∞ –∫–∞–≤–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞:", ctx.message.text);
    userStates.delete(ctx.from.id);
    coffeeTempState.delete(ctx.from.id);

    const telegramId = ctx.from.id;
    const user = await User.findOne({ telegramId });

    if (!user) {
      return ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.");
    }

    return showCoffeeOptions(ctx);
  });

  // –ö—Ä–æ–∫ 1: –í–∏–±—ñ—Ä —Ç–∏–ø—É
  bot.action(/coffee_(.+)/, async (ctx) => {
    const choice = ctx.match[1];
    const coffeeName =
      {
        espresso: "–ï—Å–ø—Ä–µ—Å–æ",
        americano: "–ê–º–µ—Ä–∏–∫–∞–Ω–æ",
        latte: "–õ–∞—Ç–µ",
        lungo: "–õ—É–Ω–≥–æ",
      }[choice] || "–ö–∞–≤–∞";

    const telegramId = ctx.from.id;
    coffeeTempState.set(telegramId, { type: coffeeName });

    await ctx.answerCbQuery();
    await ctx.editMessageText(
      `‚òï –í–∏ –æ–±—Ä–∞–ª–∏ ${coffeeName}. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:`
    );

    return ctx.telegram.sendMessage(
      ctx.chat.id,
      "üìè –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:",
      Markup.inlineKeyboard([
        [Markup.button.callback("–ú–∞–ª–µ–Ω—å–∫–∞", "size_small")],
        [Markup.button.callback("–°–µ—Ä–µ–¥–Ω—è", "size_medium")],
        [Markup.button.callback("–í–µ–ª–∏–∫–∞", "size_large")],
      ])
    );
  });

  // –ö—Ä–æ–∫ 2: –í–∏–±—ñ—Ä —Ä–æ–∑–º—ñ—Ä—É
  bot.action(/size_(.+)/, async (ctx) => {
    const sizeKey = ctx.match[1];
    const sizeName =
      {
        small: "–ú–∞–ª–µ–Ω—å–∫–∞",
        medium: "–°–µ—Ä–µ–¥–Ω—è",
        large: "–í–µ–ª–∏–∫–∞",
      }[sizeKey] || "–ó–≤–∏—á–∞–π–Ω–∞";

    const telegramId = ctx.from.id;
    const coffeeData = coffeeTempState.get(telegramId);

    if (!coffeeData) {
      return ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ —â–µ —Ä–∞–∑.");
    }

    coffeeData.size = sizeName;

    await ctx.answerCbQuery();
    await ctx.editMessageText(
      `üìè –í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–∑–º—ñ—Ä: ${sizeName}. –î–æ–¥–∞—Ç–∏ —Ü—É–∫–æ—Ä?`
    );

    return ctx.telegram.sendMessage(
      ctx.chat.id,
      "üßÇ –î–æ–¥–∞—Ç–∏ —Ü—É–∫–æ—Ä?",
      Markup.inlineKeyboard([
        [Markup.button.callback("–¢–∞–∫", "sugar_yes")],
        [Markup.button.callback("–ù—ñ", "sugar_no")],
      ])
    );
  });

  // –ö—Ä–æ–∫ 3: –í–∏–±—ñ—Ä —Ü—É–∫—Ä—É
  bot.action(/sugar_(.+)/, async (ctx) => {
    const sugarChoice = ctx.match[1] === "yes" ? "–∑ —Ü—É–∫—Ä–æ–º" : "–±–µ–∑ —Ü—É–∫—Ä—É";
    const telegramId = ctx.from.id;
    const user = await User.findOne({ telegramId });
    const coffeeData = coffeeTempState.get(telegramId);

    if (!coffeeData || !coffeeData.type || !coffeeData.size) {
      return ctx.reply("–î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }

    coffeeData.sugar = sugarChoice;

    await ctx.answerCbQuery();

    const finalText = `‚úÖ –í–∏ –∑–∞–º–æ–≤–∏–ª–∏ ${coffeeData.type} (${coffeeData.size}, ${coffeeData.sugar}). –í–∞—à–∞ –∫–∞–≤–∞ –≥–æ—Ç—É—î—Ç—å—Å—è!`;
    await ctx.editMessageText(finalText);

    if (user) {
      await notifyAdmin(
        bot,
        `‚òï ${user.firstName} (${user.phoneNumber}) –∑–∞–º–æ–≤–∏–≤(–ª–∞) ${coffeeData.type} (${coffeeData.size}, ${coffeeData.sugar})`
      );
    } else {
      await notifyAdmin(
        bot,
        `‚òï ${ctx.from.first_name} –∑–∞–º–æ–≤–∏–≤(–ª–∞) ${coffeeData.type} (${coffeeData.size}, ${coffeeData.sugar}) (–Ω–æ–º–µ—Ä –Ω–µ–≤—ñ–¥–æ–º–∏–π)`
      );
    }

    coffeeTempState.delete(telegramId);

    setTimeout(() => {
      ctx.telegram.sendMessage(ctx.chat.id, `‚òï –í–∞—à–∞ –∫–∞–≤–∞ –≤–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ!`);
    }, 60 * 1000);
  });
}

function showCoffeeOptions(ctx) {
  return ctx.reply(
    "‚òï –û–±–µ—Ä—ñ—Ç—å –∫–∞–≤—É:",
    Markup.inlineKeyboard([
      [Markup.button.callback("–ï—Å–ø—Ä–µ—Å–æ", "coffee_espresso")],
      [Markup.button.callback("–ê–º–µ—Ä–∏–∫–∞–Ω–æ", "coffee_americano")],
      [Markup.button.callback("–õ–∞—Ç–µ", "coffee_latte")],
      [Markup.button.callback("–õ—É–Ω–≥–æ", "coffee_lungo")],
    ])
  );
}
