import dotenv from "dotenv";
dotenv.config();

import { Telegraf, Markup } from "telegraf";
import { BOT_TOKEN } from "./config/env.js";
import { connectToDB } from "./services/db.js";
import { User } from "./models/User.js";
import { Appointment } from "./models/Appointment.js";
import { coffeeHandler } from "./handlers/coffeeHandler.js";
import { notifyAdmin } from "./services/notifyAdmin.js";

if (!BOT_TOKEN) throw new Error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ");

const bot = new Telegraf(BOT_TOKEN);

try {
  await connectToDB();
  console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö");
} catch (error) {
  console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏:", error);
  process.exit(1);
}

const userStates = new Map();
const coffeeTempState = new Map();
const availableTimes = ["10:00", "11:00", "12:00", "14:00", "15:00", "16:00"];

const mainKeyboard = Markup.keyboard([
  ["‚òï –ó–∞–º–æ–≤–∏—Ç–∏ –∫–∞–≤—É", "üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É"],
  ["üìÖ –ú–æ—ó –∑–∞–ø–∏—Å–∏", "üìû –í–∏–∫–ª–∏–∫–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"],
  ["üí¨ –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É"],
]).resize();

coffeeHandler(bot, userStates);

bot.start(async (ctx) => {
  try {
    const telegramId = ctx.from.id;
    const existingUser = await User.findOne({ telegramId });

    if (existingUser) {
      await ctx.reply("–ü—Ä–∏–≤—ñ—Ç —â–µ —Ä–∞–∑! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", mainKeyboard);
    } else {
      await ctx.reply(
        "–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        Markup.keyboard([
          [Markup.button.contactRequest("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º")],
        ])
          .resize()
          .oneTime()
      );
    }
  } catch (err) {
    console.error("‚ùå start error:", err.description || err);
  }
});

bot.on("contact", async (ctx) => {
  try {
    const contact = ctx.message.contact;

    const newUser = new User({
      telegramId: contact.user_id,
      firstName: ctx.from.first_name,
      lastName: ctx.from.last_name,
      phoneNumber: contact.phone_number,
      floor: null,
    });

    await newUser.save();
    await ctx.reply("–î—è–∫—É—é! –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ ‚úÖ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", mainKeyboard);
  } catch (err) {
    console.error("‚ùå contact error:", err.description || err);
  }
});

bot.hears("üìû –í–∏–∫–ª–∏–∫–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", async (ctx) => {
  try {
    const telegramId = ctx.from.id;
    const user = await User.findOne({ telegramId });

    if (user) {
      await notifyAdmin(
        bot,
        `üìû ${user.firstName} (${user.phoneNumber}) –≤–∏–∫–ª–∏–∫–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞`
      );
    }

    await ctx.reply("‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –π–¥–µ –¥–æ –≤–∞—Å");
  } catch (err) {
    console.error("‚ùå admin call error:", err.description || err);
  }
});

bot.hears("üí¨ –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É", async (ctx) => {
  try {
    userStates.set(ctx.from.id, "waiting_for_question");
    await ctx.reply(
      "üìù –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    );
  } catch (err) {
    console.error("‚ùå admin question error:", err.description || err);
  }
});

bot.hears("üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", async (ctx) => {
  try {
    userStates.set(ctx.from.id, "awaiting_procedure_selection");
    await ctx.reply(
      "üßæ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É:",
      Markup.inlineKeyboard([
        [Markup.button.callback("–ú–∞—Å–∞–∂", "procedure_massage")],
        [Markup.button.callback("–ß–∏—Å—Ç–∫–∞", "procedure_cleaning")],
        [Markup.button.callback("–ë–¢–õ", "procedure_btl")],
        [Markup.button.callback("–ï–Ω–¥–æ—Å—Ñ–µ—Ä–∞", "procedure_endosphere")],
      ])
    );
  } catch (err) {
    console.error("‚ùå procedure selection error:", err.description || err);
  }
});

bot.hears("üìÖ –ú–æ—ó –∑–∞–ø–∏—Å–∏", async (ctx) => {
  try {
    const telegramId = ctx.from.id;
    const appointments = await Appointment.find({ telegramId });

    if (appointments.length === 0) {
      return await ctx.reply("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.");
    }

    let response = "üìã –í–∞—à—ñ –∑–∞–ø–∏—Å–∏:\n\n";
    appointments.forEach((a, i) => {
      response += `${i + 1}. ${a.procedure} ‚Äî ${a.time}\n`;
    });

    await ctx.reply(response);
  } catch (err) {
    console.error("‚ùå fetch appointments error:", err.description || err);
  }
});

bot.action(/procedure_(.+)/, async (ctx) => {
  try {
    const telegramId = ctx.from.id;
    const selectionMap = {
      massage: "–ú–∞—Å–∞–∂",
      cleaning: "–ß–∏—Å—Ç–∫–∞",
      btl: "–ë–¢–õ",
      endosphere: "–ï–Ω–¥–æ—Å—Ñ–µ—Ä–∞",
    };

    const chosenKey = ctx.match[1];
    const procedureName = selectionMap[chosenKey] || "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞";

    coffeeTempState.set(telegramId, { procedure: procedureName });
    userStates.set(telegramId, "awaiting_time_selection");

    await ctx.answerCbQuery();
    await ctx.editMessageText(`‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: ${procedureName}`);

    const timeButtons = availableTimes.map((t) => [
      Markup.button.callback(t, `time_${t.replace(":", "")}`),
    ]);

    await ctx.reply(
      "üïí –û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —á–∞—Å:",
      Markup.inlineKeyboard(timeButtons)
    );
  } catch (err) {
    console.error("‚ùå procedure action error:", err.description || err);
  }
});

bot.action(/time_(\d{2})(\d{2})/, async (ctx) => {
  try {
    const telegramId = ctx.from.id;
    const user = await User.findOne({ telegramId });
    const coffeeData = coffeeTempState.get(telegramId);

    if (!coffeeData || !coffeeData.procedure) {
      return await ctx.reply("üòï –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É.");
    }

    const timeStr = `${ctx.match[1]}:${ctx.match[2]}`;
    const existing = await Appointment.findOne({
      procedure: coffeeData.procedure,
      time: timeStr,
    });

    await ctx.answerCbQuery();

    if (existing) {
      return await ctx.reply("‚ùå –¶–µ–π —á–∞—Å —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.");
    }

    const newAppointment = new Appointment({
      telegramId,
      procedure: coffeeData.procedure,
      time: timeStr,
    });

    await newAppointment.save();
    coffeeTempState.delete(telegramId);
    userStates.delete(telegramId);

    await ctx.editMessageText(
      `‚úÖ –í–∏ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ ${coffeeData.procedure} –æ ${timeStr}`
    );

    if (user) {
      await notifyAdmin(
        bot,
        `üßæ ${user.firstName} (${user.phoneNumber}) –∑–∞–ø–∏—Å–∞–≤—Å—è –Ω–∞ ${coffeeData.procedure} –æ ${timeStr}`
      );
    }
  } catch (err) {
    console.error("‚ùå time selection error:", err.description || err);
  }
});

bot.on("text", async (ctx) => {
  try {
    const telegramId = ctx.from.id;
    const state = userStates.get(telegramId);

    if (state === "waiting_for_question") {
      const user = await User.findOne({ telegramId });
      const question = ctx.message.text;

      if (user) {
        await notifyAdmin(
          bot,
          `‚ùì ${user.firstName} (${user.phoneNumber}) –∑–∞–¥–∞–≤(–ª–∞) –ø–∏—Ç–∞–Ω–Ω—è:\n"${question}"`
        );
      }

      userStates.delete(telegramId);
      await ctx.reply("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
    }
  } catch (err) {
    console.error("‚ùå text handler error:", err.description || err);
  }
});

bot.launch();
console.log("üöÄ Bot is running");
